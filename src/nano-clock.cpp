/*
 * Stable Clock Signal Generator using Timer1
 * Supports frequencies from ~1 Hz to ~35 kHz on Pin 9
 */
#include <Arduino.h>


const uint32_t clockFrequency = 1000; // Desired clock frequency in Hz

void setup() {
  pinMode(9, OUTPUT); // Pin 9 is connected to Timer1 (OC1A)

  // Stop Timer1
  TCCR1A = 0;
  TCCR1B = 0;

  // Configure Timer1 for CTC mode
  TCCR1B |= (1 << WGM12); // CTC mode

  uint16_t prescaler = 1;
  uint16_t topValue = 0;

  // Select appropriate prescaler
  if (clockFrequency > 1000) {
    prescaler = 1; // No prescaling
    TCCR1B |= (1 << CS10); // Prescaler = 1
  } else if (clockFrequency > 125) {
    prescaler = 8;
    TCCR1B |= (1 << CS11); // Prescaler = 8
  } else if (clockFrequency > 15) {
    prescaler = 64;
    TCCR1B |= (1 << CS11) | (1 << CS10); // Prescaler = 64
  } else if (clockFrequency > 2) {
    prescaler = 256;
    TCCR1B |= (1 << CS12); // Prescaler = 256
  } else {
    prescaler = 1024;
    TCCR1B |= (1 << CS12) | (1 << CS10); // Prescaler = 1024
  }

  // Calculate TOP value
  topValue = (16000000 / (2 * prescaler * clockFrequency)) - 1;

  // Handle frequencies above timer limits
  if (topValue > 65535) {
    topValue = 65535; // Cap TOP value
  } else if (topValue < 1) {
    // If TOP is too small, set the maximum feasible frequency
    topValue = 1;
  }

  OCR1A = topValue; // Set the TOP value

  // Toggle OC1A (Pin 9) on compare match
  TCCR1A |= (1 << COM1A0);
}

void loop() {
  // Nothing needed here; clock is generated by hardware.
}
