/*
 * Stable Clock Signal Generator using Timer1 on Arduino Nano
 * Supports frequencies from ~1 Hz to ~4 MHz on Pin 9
 */
#include <Arduino.h>


const uint32_t clockFrequency = 1000; // Desired clock frequency in Hz

void selectPrescaler(unsigned long clockFrequency);
void configureTimer1();
uint16_t calculateTopValue(unsigned long clockFrequency, uint16_t prescaler);
void handleTopValueLimits(uint16_t &topValue);

void setup() {
  pinMode(9, OUTPUT); // Pin 9 is connected to Timer1 (OC1A)
  configureTimer1();

  uint16_t prescaler = 1;
  uint16_t topValue = 0;

  selectPrescaler(clockFrequency);
  topValue = calculateTopValue(clockFrequency, prescaler);
  handleTopValueLimits(topValue);

  OCR1A = topValue; // Set the TOP value

  // Toggle OC1A (Pin 9) on compare match
  TCCR1A |= (1 << COM1A0);
}

void loop() {
  // Nothing needed here; clock is generated by hardware.
}

/**
 * @brief Selects the appropriate prescaler for Timer1 based on the given clock frequency.
 * 
 * This function configures the Timer1 prescaler to achieve the desired clock frequency.
 * It sets the appropriate bits in the TCCR1B register to configure the prescaler.
 * 
 * @param clockFrequency The desired clock frequency in Hz.
 */
void selectPrescaler(unsigned long clockFrequency) {
  int prescaler;
  // Select appropriate prescaler
  if (clockFrequency > 1000) {
    prescaler = 1; // No prescaling
    TCCR1B |= (1 << CS10); // Prescaler = 1
  } else if (clockFrequency > 125) {
    prescaler = 8;
    TCCR1B |= (1 << CS11); // Prescaler = 8
  } else if (clockFrequency > 15) {
    prescaler = 64;
    TCCR1B |= (1 << CS11) | (1 << CS10); // Prescaler = 64
  } else if (clockFrequency > 2) {
    prescaler = 256;
    TCCR1B |= (1 << CS12); // Prescaler = 256
  } else {
    prescaler = 1024;
    TCCR1B |= (1 << CS12) | (1 << CS10); // Prescaler = 1024
  }
}

/**
 * @brief Configures Timer1 for CTC (Clear Timer on Compare Match) mode.
 * 
 * This function stops Timer1, clears its control registers, and sets it to CTC mode.
 * CTC mode allows the timer to reset when it reaches a specified value, which is useful
 * for generating precise time intervals.
 */
void configureTimer1() {
  // Stop Timer1
  TCCR1A = 0;
  TCCR1B = 0;

  // Configure Timer1 for CTC mode
  TCCR1B |= (1 << WGM12); // CTC mode
}

/**
 * @brief Calculates the TOP value for Timer1 based on the given clock frequency and prescaler.
 * 
 * This function calculates the TOP value that Timer1 should count to in order to achieve the
 * desired clock frequency. The calculation is based on the clock frequency of the microcontroller
 * and the selected prescaler.
 * 
 * @param clockFrequency The desired clock frequency in Hz.
 * @param prescaler The prescaler value used for Timer1.
 * @return uint16_t The calculated TOP value.
 */
uint16_t calculateTopValue(unsigned long clockFrequency, uint16_t prescaler) {
  return (16000000 / (2 * prescaler * clockFrequency)) - 1;
}


/**
 * @brief Handles the limits of the TOP value for Timer1.
 * 
 * This function ensures that the TOP value for Timer1 is within the valid range. If the calculated
 * TOP value is too high or too low, it adjusts the value to be within the acceptable range.
 * 
 * @param topValue The calculated TOP value for Timer1.
 */
void handleTopValueLimits(uint16_t &topValue) {
  // Handle frequencies above timer limits
  if (topValue > 65535) {
    topValue = 65535; // Cap TOP value
  } else if (topValue < 1) {
    // If TOP is too small, set the maximum feasible frequency
    topValue = 1;
  }
}
